Last lection
9 Oct 2017

Prozhoha Ihor
Kolinko Ihor
Golang Developer, SoftServe

* Escape analysis

* Escape analysis

.link https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/

Achille Roussel and Rick Branson on September 19th 2017

* Escape analysis

	package main

	import "fmt"

	func main() {
			x := 42
			fmt.Println(x)
	}

	$ go build -gcflags '-m' ./main.go
	# command-line-arguments
	./main.go:7: x escapes to heap
	./main.go:7: main ... argument does not escape

* Escape

See here that the variable x “escapes to the heap,” which means it will be dynamically allocated on the heap at runtime. This example is a little puzzling. To human eyes, it is immediately obvious that x will not escape the main() function. The compiler output doesn’t explain why it thinks the value escapes. For more details, pass the -m option multiple times, which makes the output more verbose:

	$ go build -gcflags '-m -m' ./main.go
	# command-line-arguments
	./main.go:5: cannot inline main: non-leaf function
	./main.go:7: x escapes to heap
	./main.go:7:         from ... argument (arg to ...) at ./main.go:7
	./main.go:7:         from *(... argument) (indirection) at ./main.go:7
	./main.go:7:         from ... argument (passed to call[argument content escapes]) at ./main.go:7
	./main.go:7: main ... argument does not escape

* Escape

Ah, yes! This shows that x escapes because it is passed to a function argument which escapes itself — more on this later.

The rules may continue to seem arbitrary at first, but after some trial and error with these tools, patterns do begin to emerge. For those short on time, here’s a list of some patterns we’ve found which typically cause variables to escape to the heap:

* Escape rule 1

Sending pointers or values containing pointers to channels. At compile time there’s no way to know which goroutine will receive the data on a channel. Therefore the compiler cannot determine when this data will no longer be referenced.

* Escape rule 2

Storing pointers or values containing pointers in a slice. An example of this is a type like []*string. This always causes the contents of the slice to escape. Even though the backing array of the slice may still be on the stack, the referenced data escapes to the heap.

* Escape rule 3

Backing arrays of slices that get reallocated because an append would exceed their capacity. In cases where the initial size of a slice is known at compile time, it will begin its allocation on the stack. If this slice’s underlying storage must be expanded based on data only known at runtime, it will be allocated on the heap.

* Escape rule 4

Calling methods on an interface type. Method calls on interface types are a dynamic dispatch — the actual concrete implementation to use is only determinable at runtime. Consider a variable r with an interface type of io.Reader. A call to r.Read(b) will cause both the value of r and the backing array of the byte slice b to escape and therefore be allocated on the heap.

* GC

.link https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/
.link https://talks.golang.org/2015/go-gc.pdf
.link https://habrahabr.ru/post/265833/

* nil

nil Can Represent Zero Values Of Many Types
In Go, nil can represent zero value of the following kinds of types:

- pointer types.
- map types.
- slice types.
- function types.
- channel types.
- interface types.

* nil Is Not A Keyword In Go

	package main

	import "fmt"

	func main() {
		nil := 123
		fmt.Println(nil) // 123
		
		// The following line will compile error, for
		// nil represents an int value now in this scope.
		/*
		var _ map[string]int = nil
		*/
	}

* The Sizes Of Different Kinds Of nil Values May Be Different

The memory layouts of all value of a type are always the same. nil values of the type are exceptions. The size of a nil value is always the same as the sizes of non-nil values whose types are same as the nil value. So nil identifiers representing different zero values may have different sizes.

	func main() {
		var p *struct{} = nil
		fmt.Println( unsafe.Sizeof( p ) ) // 4
		var s []int = nil
		fmt.Println( unsafe.Sizeof( s ) ) // 12
		var m map[int]bool = nil
		fmt.Println( unsafe.Sizeof( m ) ) // 4
		var c chan string = nil
		fmt.Println( unsafe.Sizeof( c ) ) // 4
		var f func() = nil
		fmt.Println( unsafe.Sizeof( f ) ) // 4
		var i interface{} = nil
		fmt.Println( unsafe.Sizeof( i ) ) // 8
	}

* Two nil Values Of Two Different Types May Be Not Comparable

	// Following lines don't compile.
	var _ = (*int)(nil) == (*bool)(nil)         // error: mismatched types.
	var _ = (chan int)(nil) == (chan bool)(nil) // error: mismatched types.
	
* Two nil Values Of The Same Type May Be Not Comparable

	// The following lines don't compile.
	var _ = ([]int)(nil) == ([]int)(nil)
	var _ = (map[string]int)(nil) == (map[string]int)(nil)
	var _ = (func())(nil) == (func())(nil)


	// The following lines compile okay.
	var _ = ([]int)(nil) == nil
	var _ = (map[string]int)(nil) == nil
	var _ = (func())(nil) == nil


* What is "reflection"?

Reflection in computing is the ability of a program to  examine its own structure, particularly through types;  it's a form of metaprogramming. It's also a great
source of confusion.

.link http://blog.golang.org/laws-of-reflection http://blog.golang.org/laws-of-reflection

* Laws of reflection

- Reflection goes from interface value to reflection object
- Reflection goes from reflection object to interface value
- To modify a reflection object, the value must be settable

* Reflection goes from interface  value to reflection object

    var x float64 = 3.4
    v := reflect.ValueOf(x)

    fmt.Println("type:", v.Type())
    fmt.Println("kind is float64:", v.Kind() == reflect.Float64)
    fmt.Println("value:", v.Float())

prints

    type: float64
    kind is float64: true
    value: 3.4

*ValueOf* returns a new *Value* initialized to the concrete value stored in the interface i. *ValueOf(nil)* returns the zero Value.

*Value* is the reflection interface to a Go value.

* Type and Kind

*Type* is the representation of a Go type. (and is an interface):

    var x uint8 = 'x'
    v := reflect.ValueOf(x)
    fmt.Println("type:", v.Type())          // uint8.
    fmt.Println("kind is uint8: ",
                v.Kind() == reflect.Uint8)  // true.
    x = uint8(v.Uint())                     // v.Uint returns a uint64.

A *Kind* represents the specific kind of type that a *Type* represents.

    type MyInt int
    var x MyInt = 7
    v := reflect.ValueOf(x)
    fmt.Println("kind is Int: ", v.Kind() == reflect.Int) // true.

* To modify a reflection object, the  value must be settable

    var x float64 = 3.4
    v := reflect.ValueOf(x)
    v.SetFloat(7.1) // Error: will panic.

    // panic: reflect.Value.SetFloat using unaddressable value
    var x float64 = 3.4

    v := reflect.ValueOf(x)
    fmt.Println("settability of v:", v.CanSet()) // -> false

Damn, what is "settability"?

* Settability

Settability is determined by whether the  reflection object holds the original item.

    var x float64 = 3.4
    // We're passing the copy of x here.

    v := reflect.ValueOf(x)

    // Think about the difference between f(x) and f(&x).
    // v.SetFloat(7.1) updates the copied value inside the
    // reflection value.

So then, how can we modify the reflection value?

* Settability

Use pointers:

    var x float64 = 3.4
    p := reflect.ValueOf(&x)                     // Note: take the address of x.

    fmt.Println("type of p:", p.Type())          // -> type of p: *float64

    fmt.Println("settability of p:", p.CanSet()) // -> false

    v := p.Elem()
    fmt.Println("settability of v:", v.CanSet())

    v.SetFloat(7.1)                              // settability of v: true

    fmt.Println(x) // -> 7.1

* Modifying Structs

    type T struct {
        A int     // Only exported fields are settable.
        B string
    }

    t := T{42, "abc"}
    s := reflect.ValueOf(&t).Elem()

    typeOfT := s.Type()
    for i := 0; i < s.NumField(); i++ {
        f := s.Field(i)
        fmt.Printf("%d: %s %s = %v\n", i,
            typeOfT.Field(i).Name, f.Type(), f.Interface())
    }

    // "0: A int = 42" and "1: B string = abc"
    s.Field(0).SetInt(77)
    s.Field(1).SetString("Sunset Strip")
    fmt.Println("t is now", t) // t is now {77 Sunset Strip}

* References:

The Go Blog: The Laws of Reflection
.link http://blog.golang.org/laws-of-reflection http://blog.golang.org/laws-of-reflection

Go Data Structures - Interfaces
.link http://research.swtch.com/interfaces http://research.swtch.com/interfaces

Package reflect
.link http://golang.org/pkg/reflect http://golang.org/pkg/reflect

* Plugins

* Create the plugin

	package main

	func Add(x, y int) int {
		return x+y
	}
	
go build -buildmode=plugin -o myplugin.so myplugin.go

* Load plugin

Load the shared library file we built:

	p, _ := plugin.Open("./myplugin.so")  

We call plugin.Open() with the path to the shared library file we created in the previous step. This gives us back a pointer to a Plugin type.
Next we call plugin.Lookup() with the name of the Symbol we want to use:

	add, _ := p.Lookup("Add")

A Symbol can be “any exported variable or function”.

* Use plugin
Here is how we call your plugin method:

	sum := add.(func(int, int) int)(1, 2)

This was confusing to me at first, let’s break it down.
The original plugin function signature looks like:

	func Add(x, y int) int

Which is a function that takes two integers func(int,int) and returns an integer:

	func(int,int) int

We do a type assertion (think cast) on our Symbol add

	add.(func(int, int) int)

which tells Go that add is a function with that signature.
Lastly we call it with the parameters we want to add (1,2) and store the results in sum

	sum := add.(func(int, int) int)(1, 2)

* QUIZ

.link https://goo.gl/r3WdjQ

