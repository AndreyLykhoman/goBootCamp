SoftServe Golang Boot Camp

Igor Kolinko
SoftServe

Igor Prozhoha
SoftServe

* Go Concurrency Patterns
.image ./images/big.png


* Ping-Pong
.play ./support/ping-pong.go /STARTMAIN1/,/STOPMAIN1/


* Ping-Pong
.image ./images/pingpong.gif


* Ping-Pong
        go player("ping", table)
        go player("pong", table)
        go player("ping-ping", table)
.image ./images/pingpong3.gif

* Ping-Pong
        for i := 0; i < 100; i++ {
            go player(table)
        }
.image ./images/pingpong100.gif

* Fan-In
.image ./images/gophermegaphones.jpg

* Fan-In
.play ./support/fan-in.go /START1/,/STOP1/

* Fan-In
.image ./images/fanin.gif


* Workers. Fan-out
.code ./support/fan-out.go /START1/,/STOP1/
.code ./support/fan-out.go /START2/,/STOP2/

* Workers. Fan-out
.play ./support/fan-out.go /START3/,/STOP3/

* Workers. Fan-out
.image ./images/workers.gif


* Workers. Fan-out
    const (
        WORKERS    = 5
        SUBWORKERS = 3
        TASKS      = 20
        SUBTASKS   = 10
    )
.code ./support/workers.go /START1/,/STOP1/

* Workers. Fan-out
.code ./support/workers.go /START2/,/STOP2/

* Workers. Fan-out
.play ./support/workers.go /START3/,/STOP3/

* Workers. Fan-out
.image ./images/workers2.gif

* Server
.code ./support/server.go

* Server
.image ./images/servers.gif

* Server
.image ./images/servers2.gif


* Server + Worker
.image ./images/servers3.gif

* Patterns

*Ivan*Danyliuk*, [[https://divan.github.io/posts/go_concurrency_visualize][Visualizing Concurrency in Go]], 24 January 2016
Slides from GopherCon'16: [[http://divan.github.io/talks/2016/gophercon][gophercon]]


* Timing out
.play ./support/TimeOut.go

* Context

  // A Context carries a deadline, cancelation signal, and request-scoped values
  // across API boundaries. Its methods are safe for simultaneous use by multiple
  // goroutines.
  type Context interface {
  	// Done returns a channel that is closed when this Context is canceled
  	// or times out.
  	Done() <-chan struct{} // HL

  	// Err indicates why this context was canceled, after the Done channel
  	// is closed.
  	Err() error // HL

  	// Deadline returns the time when this Context will be canceled, if any.
  	Deadline() (deadline time.Time, ok bool) // HL

  	// Value returns the value associated with key or nil if none.
  	Value(key interface{}) interface{} // HL
  }

* Context. WithCancel()
.play ./support/contextWithCancel.go /START/,/STOP/

* Context. WithDeadline()
.play ./support/contextWithDeadline.go /START/,/STOP/

* Context. WithTimeOut()
.play ./support/contextWithTimeOut.go /START/,/STOP/

* Context. WithValue()
.play ./support/contextWithValue.go /START/,/STOP/

* Data Races
Гонки относятся к числу наиболее распространенных и наиболее сложных для отладки типов ошибок в concurrency системах. Гонка данных возникает, когда два горутины получают доступ к одной и той же переменной одновременно, и по меньшей мере одно из обращений является записью.

* Data Races. Examples

* Data Races. Race on loop counter
.play ./support/DataRaceInLoop.go

* Data Races. Race on loop counter Fix
.play ./support/DataRaceInLoopFix.go


* Data Races. Detection

  $ go test -race mypkg    // to test the package
  $ go run -race mysrc.go  // to run the source file
  $ go build -race mycmd   // to build the command
  $ go install -race mypkg // to install the package


